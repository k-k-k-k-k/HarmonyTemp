# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../dsoftbus.gni")

module_output_path = "dsoftbus/connection"
dsoftbus_root_path = "../../../.."
softbus_adapter_common = "${dsoftbus_root_path}/adapter/common"

config("softbus_connection_ble_test_config") {
  include_dirs = [
    "$dsoftbus_dfx_path/interface/include",
    "$dsoftbus_root_path/tests/core/connection/ble/mock",
    "$dsoftbus_root_path/interfaces/kits/common",
    "$dsoftbus_root_path/interfaces/kits/discovery",
    "$dsoftbus_root_path/interfaces/kits/bus_center",
    "$softbus_adapter_common/include",
    "$softbus_adapter_common/net/bluetooth/include",
    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/core/connection/interface",
    "$dsoftbus_root_path/core/connection/manager",
    "$dsoftbus_root_path/core/connection/tcp/include",
    "$dsoftbus_root_path/core/connection/ble/include",
    "$dsoftbus_root_path/core/connection/br/include",
    "$dsoftbus_root_path/core/adapter/br/include",
    "$dsoftbus_root_path/core/connection/ble/channel",
    "$dsoftbus_root_path/core/connection/ble/src",
    "$dsoftbus_root_path/core/bus_center/interface",
    "$dsoftbus_root_path/core/bus_center/service/include",
    "$dsoftbus_root_path/core/bus_center/lnn/lane_hub/lane_manager/include",
    "$dsoftbus_root_path/core/discovery/interface",
    "$dsoftbus_root_path/core/discovery/manager/include",
    "$dsoftbus_root_path/adapter/common/bluetooth/include",
    "$dsoftbus_root_path/core/bus_center/service/include",
  ]
}

ohos_unittest("ConnectionBleTest") {
  module_out_path = module_output_path
  public_configs = [ ":softbus_connection_ble_test_config" ]
  sources = [
    "$dsoftbus_root_path/tests/core/connection/ble/mock/softbus_conn_ble_connection_mock.cpp",
    "softbus_conn_ble_connection_test.cpp",
  ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
    "$dsoftbus_root_path/core/frame:softbus_server",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("ConnectionBleSwitchTest") {
  module_out_path = module_output_path
  public_configs = [ ":softbus_connection_ble_test_config" ]
  sources = [ "softbus_conn_ble_switch_test.cpp" ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
    "$dsoftbus_root_path/core/frame:softbus_server",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("BleConnectionServiceTest") {
  module_out_path = module_output_path
  public_configs = [ ":softbus_connection_ble_test_config" ]
  sources = [
    "$dsoftbus_root_path/tests/core/connection/ble/mock/softbus_conn_ble_connection_mock.cpp",
    "softbus_conn_server_test.cpp",
  ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
    "$dsoftbus_root_path/core/frame:softbus_server",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("BleConnectionManagerTest") {
  module_out_path = module_output_path
  include_dirs = [
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/interfaces/inner_kits/lnn",
  ]
  public_configs = [ ":softbus_connection_ble_test_config" ]
  sources = [
    "$dsoftbus_root_path/core/connection/ble/src/ble_protocol_interface_factory.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_connection.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_manager.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_snapshot.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_flow_control.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_manager.c",
    "$dsoftbus_root_path/tests/core/connection/ble/mock/softbus_conn_ble_manager_mock.cpp",
    "softbus_conn_ble_manager_test.cpp",
  ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("BleTransTest") {
  module_out_path = module_output_path
  include_dirs = [
    "$softbus_adapter_common/include",
    "$dsoftbus_dfx_path/interface/include",
    "$dsoftbus_root_path/core/connection/ble/include",
    "$dsoftbus_root_path/core/connection/common/include",
    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/core/connection/manager",
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/adapter/common/include",
    "$dsoftbus_root_path/tests/core/connection/ble/mock",
  ]
  sources = [
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_send_queue.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_trans.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_flow_control.c",
    "$dsoftbus_root_path/tests/core/connection/ble/mock/softbus_conn_ble_trans_mock.cpp",
    "softbus_conn_ble_trans_test.cpp",
  ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("BleClientTest") {
  module_out_path = module_output_path
  include_dirs = [
    "$dsoftbus_dfx_path/interface/include",
    "$dsoftbus_root_path/core/connection/ble/include",
    "$dsoftbus_root_path/core/connection/common/include",
    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/core/common/net/bluetooth/include",
    "$dsoftbus_root_path/core/connection/manager",
    "$dsoftbus_root_path/core/discovery/manager/include",
    "$dsoftbus_root_path/core/discovery/interface",
    "$dsoftbus_root_path/core/bus_center/service/include",
    "$dsoftbus_root_path/core/bus_center/interface",
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/adapter/common/include",
    "$dsoftbus_root_path/interfaces/inner_kits/lnn",
    "$dsoftbus_root_path/interfaces/kits/bus_center",
    "$dsoftbus_root_path/interfaces/kits/discovery",
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/tests/core/connection/ble/mock",
  ]
  sources = [
    "$dsoftbus_root_path/core/connection/ble/src/ble_protocol_interface_factory.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_client.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_connection.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_manager.c",
    "./mock/softbus_conn_ble_client_mock.cpp",
    "softbus_conn_client_test.cpp",
  ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("BleHidumperTest") {
  module_out_path = module_output_path
  include_dirs = [
    "$dsoftbus_dfx_path/interface/include",
    "$dsoftbus_root_path/core/connection/ble/include",
    "$dsoftbus_root_path/core/connection/common/include",
    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/core/common/net/bluetooth/include",
    "$dsoftbus_root_path/core/connection/manager",
    "$dsoftbus_root_path/core/discovery/manager/include",
    "$dsoftbus_root_path/core/discovery/interface",
    "$dsoftbus_root_path/core/bus_center/service/include",
    "$dsoftbus_root_path/core/bus_center/interface",
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/adapter/common/include",
    "$dsoftbus_root_path/interfaces/inner_kits/lnn",
    "$dsoftbus_root_path/interfaces/kits/bus_center",
    "$dsoftbus_root_path/interfaces/kits/discovery",
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/tests/core/connection/ble/mock",
  ]

  public_configs = [ ":softbus_connection_ble_test_config" ]

  sources = [
    "$dsoftbus_root_path/core/connection/ble/src/ble_protocol_interface_factory.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_connection.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_manager.c",
    "$dsoftbus_root_path/core/connection/ble/src/softbus_conn_ble_snapshot.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_flow_control.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_manager.c",
    "$dsoftbus_root_path/tests/core/connection/ble/mock/softbus_conn_ble_manager_mock.cpp",
    "connection_ble_hidumper_test.cpp",
  ]

  deps = [
    "$dsoftbus_dfx_path:softbus_dfx",
    "$dsoftbus_dfx_path/dumper/legacy:softbus_dfx_dump",
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
  ]

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson",
    "c_utils:utils",
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog",
  ]
}
