# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../dsoftbus.gni")

native_source_path = rebase_path("$dsoftbus_root_path")
trans_session_sdk_src = [
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_session_callback.c",
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_session_manager.c",
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_message_service.c",
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_session_service.c",
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_socket_service.c",
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_socket_manager.c",
  "$dsoftbus_sdk_path/transmission/session/src/client_trans_socket_option.c",
]

broadcast_dep_dir = "dsoftbus_enhance/interfaces/kits/broadcast"
enhanced_kits_broadcast = exec_script("$dsoftbus_root_path/check_sub_module.py",
                                      [
                                        "$native_source_path",
                                        "$broadcast_dep_dir",
                                      ],
                                      "value")
if (defined(ohos_lite)) {
  trans_session_sdk_inc = [
    "$dsoftbus_sdk_path/transmission/session/include",
    "$dsoftbus_root_path/interfaces/inner_kits/transport",
    "$dsoftbus_root_path/sdk/transmission/trans_channel/statistics/include",
    "$dsoftbus_root_path/sdk/transmission/trans_channel/udp/file/include",
    "//third_party/cJSON",
    "$dsoftbus_root_path/components/nstackx/nstackx_core/dfile/interface",
  ]
  trans_session_sdk_src += [
    "$dsoftbus_sdk_path/transmission/session/cpp/src/session_ipc_adapter_virtual.c",
    "$dsoftbus_sdk_path/transmission/session/cpp/src/session_set_timer_virtual.c",
  ]
} else {
  trans_session_sdk_inc = [
    "$dsoftbus_sdk_path/transmission/session/include",
    "$dsoftbus_sdk_path/transmission/session/cpp/include",
    "$dsoftbus_sdk_path/transmission/session/cpp/src",
    "$dsoftbus_root_path/interfaces/inner_kits/transport",
    "$dsoftbus_root_path/sdk/transmission/trans_channel/statistics/include",
    "$dsoftbus_root_path/sdk/transmission/trans_channel/udp/file/include",
  ]

  trans_session_sdk_src += [
    "$dsoftbus_sdk_path/transmission/session/cpp/src/session_ipc_adapter.cpp",
  ]

  if (defined(global_parts_info) &&
      defined(global_parts_info.hiviewdfx_hicollie)) {
    trans_session_sdk_src += [
      "$dsoftbus_sdk_path/transmission/session/cpp/src/session_set_timer.cpp",
    ]
  } else {
    trans_session_sdk_src += [ "$dsoftbus_sdk_path/transmission/session/cpp/src/session_set_timer_virtual.c" ]
  }

  broadcast_dep_dir = "dsoftbus_enhance/core/broadcast/notification_message"
  enhanced_broadcast = exec_script("$dsoftbus_root_path/check_sub_module.py",
                                   [
                                     "$native_source_path",
                                     "$broadcast_dep_dir",
                                   ],
                                   "value")
  if (enhanced_broadcast) {
    import(
        "$dsoftbus_root_path/dsoftbus_enhance/sdk/transmission/trans_channel/ble_broadcast/broadcast_sdk.gni")

    trans_session_sdk_src += broadcast_sdk_sources
    trans_session_sdk_inc += broadcast_sdk_include_dirs
  } else {
    trans_session_sdk_inc +=
        [ "$dsoftbus_root_path/core/transmission/broadcast/include" ]
    trans_session_sdk_src += [ "$dsoftbus_root_path/core/transmission/broadcast/src/trans_spec_object_proxy.cpp" ]
  }
}

dep_schema = "dsoftbus_enhance/sdk/transmission/session/src"
schema_enhanced = exec_script("$dsoftbus_root_path/check_sub_module.py",
                              [
                                "$native_source_path",
                                "$dep_schema",
                              ],
                              "value")

if (schema_enhanced) {
  import(
      "../../../dsoftbus_enhance/sdk/transmission/session/src/trans_schema.gni")

  trans_session_sdk_src += schema_src
  trans_session_sdk_inc += schema_inc
}

dep_dir = "dsoftbus_enhance/sdk/transmission/session"
enhanced_socket = exec_script("$dsoftbus_root_path/check_sub_module.py",
                              [
                                "$native_source_path",
                                "$dep_dir",
                              ],
                              "value")
if (enhanced_socket) {
  if (dsoftbus_feature_trans_udp_file == true &&
      dsoftbus_feature_dfile == true) {
    trans_session_sdk_src += [ "$dsoftbus_root_path/dsoftbus_enhance/sdk/transmission/session/src/client_trans_socket_option_ext.c" ]
  } else {
    trans_session_sdk_src += [
      "$dsoftbus_root_path/sdk/transmission/session/src/client_trans_socket_option_virtual.c",
      "$dsoftbus_root_path/sdk/transmission/trans_channel/udp/file/src/client_trans_file_schema_virtual.c",
    ]
  }
  trans_session_sdk_inc += [
    "$dsoftbus_root_path/dsoftbus_enhance/interfaces/kits/transport",
    "$dsoftbus_root_path/sdk/transmission/session/include",
    "$dsoftbus_root_path/components/nstackx_enhanced/nstackx_util/interface",
  ]
} else {
  trans_session_sdk_src += [
    "$dsoftbus_root_path/sdk/transmission/session/src/client_trans_socket_option_virtual.c",
    "$dsoftbus_root_path/sdk/transmission/trans_channel/udp/file/src/client_trans_file_schema_virtual.c",
  ]
  trans_session_sdk_inc += [
    "$dsoftbus_root_path/interfaces/kits/transport",
    "$dsoftbus_root_path/sdk/transmission/session/include",
  ]
}
